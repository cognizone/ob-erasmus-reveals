import fs from 'fs';
import path from 'path';
import prettier from 'prettier';

const basePath = 'apps/ob-erasmus-reveal/src/assets';

const fallbackMap = readJson<{ [label: string]: string }>('base-data/countries-fallbacks.json');
const countries = readJson<Countries>('base-data/countries.json');
const geoJson = readJson<GeoJSON>('base-data/world.json');

const conceptsMissingMappings = [] as Concept[];
countries.data.forEach(country => {
  const entry = geoJson.features.find(f => isSameCountry(country, f));
  if (entry) {
    entry.properties.name = country['@id'];
  } else {
    conceptsMissingMappings.push(country);
  }
});

countries.data = countries.data.filter(country => !conceptsMissingMappings.find(c => c['@id'] === country['@id']));

const geoJsonNoMapping: Feature[] = [];

geoJson.features = geoJson.features.filter(f => {
  if (!f.properties.name.startsWith('http')) {
    geoJsonNoMapping.push(f);
    return false;
  }
  return true;
});

writeJson('data/world.json', geoJson);
writeJson('data/countries.json', countries);
writeJson('base-data/missing-countries.json', conceptsMissingMappings);
writeJson('base-data/missing-geojson.json', geoJsonNoMapping);

function isSameCountry(country: Concept, feature: Feature): boolean {
  const label = country.prefLabel.en[0];
  if (label === feature.properties.name) return true;
  if (fallbackMap[feature.properties.name] === country['@id']) return true;
  return false;
}

function writeJson(partialPath: string, content: {}): void {
  const stringContent = prettier.format(JSON.stringify(content), { parser: 'json' });
  fs.writeFileSync(path.join(basePath, partialPath), stringContent, 'utf8');
}

function readJson<T>(partialPath: string): T {
  return JSON.parse(fs.readFileSync(path.join(basePath, partialPath), 'utf-8')) as T;
}

// Generated by https://quicktype.io

export interface GeoJSON {
  type: string;
  crs: CRS;
  features: Feature[];
}

export interface CRS {
  type: string;
  properties: CRSProperties;
}

export interface CRSProperties {
  name: string;
}

export interface Feature {
  geometry: Geometry;
  properties: FeatureProperties;
}

export interface Geometry {
  type: Type;
  coordinates: Array<Array<Array<number[] | number>>>;
}

export enum Type {
  MultiPolygon = 'MultiPolygon',
  Polygon = 'Polygon',
}

export interface FeatureProperties {
  name: string;
  childNum: number;
  cp?: number[];
}

// Generated by https://quicktype.io

export interface Countries {
  version: number;
  data: Concept[];
}

export interface Concept {
  '@id': string;
  '@type': Type;
  prefLabel: { [key: string]: string[] };
}

export enum Type {
  Country = 'Country',
}
